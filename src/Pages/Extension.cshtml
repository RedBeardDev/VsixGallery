@page "{id?}"
@model ExtensionModel
@using moment.net;

@{
    ViewData["Title"] = Model.Package.Name;
    ViewData["Description"] = Model.Package.Description.Substring(0, Math.Min(Model.Package.Description.Length, 200));
    ViewData["Image"] = Model.Package.Icon;
}

<link href="~/css/extensions.scss" inline />

<article>
    <h1>
        @Model.Package.Name
        <a href="@Model.Package.FeedLink" class="feed shadow" title="ATOM feed for this extension only">Gallery feed (extension)</a>
    </h1>
    <img class="icon" src="@Model.Package.Icon" asp-append-version="true" alt="@Model.Package.Name" />

    <div id="details">
        <p>@Model.Package.Description</p>
        <a class="download shadow" href="@Model.Package.DownloadLink">▼ Download</a>

        <dl>
            <dt>Author</dt>
            <dd><a href="@Model.Package.AuthorLink">@Model.Package.Author</a></dd>

            <dt>Version</dt>
            <dd>@Model.Package.Version</dd>

            <dt>Updated</dt>
            <dd title="@Model.Package.DatePublished.ToUniversalTime()">@Model.Package.DatePublished.FromNow()</dd>
        </dl>

        <ul id="links">
            <li><a href="@Model.Package.MoreInfoUrl" rel="noopener noreferrer">✪ Website</a></li>

            @if (!string.IsNullOrWhiteSpace(Model.Package.Repo))
            {
                <li><a href="@Model.Package.Repo" rel="noopener noreferrer">✎ Source code</a></li>
                <li><a href="@Model.Package.IssueTracker" rel="noopener noreferrer">✓ Issue tracker</a></li>
            }
        </ul>
    </div>

    @if (Model.Package.HasValidatorErrors)
    {
        <div id="validation">
            <h2>⚠ Validation</h2>
            <ul>
                @foreach (var error in Model.Package.Errors)
                {
                    <li>@error</li>
                }
            </ul>

            <a href="https://gist.github.com/madskristensen/7310c0d61694e323f4deeb5a70f35fec">See guidelines</a>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(Model.Package.ReadmeUrl))
    {
        <p id="readme">Loading...</p>
        <script>
            var readme = document.getElementById('readme');
            var url = '@Model.Package.ReadmeUrl';

            fetch('https://markdownservice.azurewebsites.net/markdown.ashx?url=' + url)
                .then(function (response) { return !response.ok ? "Readme : Not available" : reponse.text(); })
                .then(text => readme.innerHTML = text);
        </script>
    }
</article>
